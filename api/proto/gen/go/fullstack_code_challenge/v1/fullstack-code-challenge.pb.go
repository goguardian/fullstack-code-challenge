// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.12.4
// source: fullstack_code_challenge/v1/fullstack-code-challenge.proto

package fullstack_code_challenge_v1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetClassroomsAndStudentsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClassroomIDs []uint32 `protobuf:"varint,1,rep,packed,name=classroomIDs,proto3" json:"classroomIDs,omitempty"`
}

func (x *GetClassroomsAndStudentsRequest) Reset() {
	*x = GetClassroomsAndStudentsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fullstack_code_challenge_v1_fullstack_code_challenge_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClassroomsAndStudentsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClassroomsAndStudentsRequest) ProtoMessage() {}

func (x *GetClassroomsAndStudentsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fullstack_code_challenge_v1_fullstack_code_challenge_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClassroomsAndStudentsRequest.ProtoReflect.Descriptor instead.
func (*GetClassroomsAndStudentsRequest) Descriptor() ([]byte, []int) {
	return file_fullstack_code_challenge_v1_fullstack_code_challenge_proto_rawDescGZIP(), []int{0}
}

func (x *GetClassroomsAndStudentsRequest) GetClassroomIDs() []uint32 {
	if x != nil {
		return x.ClassroomIDs
	}
	return nil
}

type GetClassroomsAndStudentsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Classrooms map[uint32]*Classroom `protobuf:"bytes,1,rep,name=classrooms,proto3" json:"classrooms,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetClassroomsAndStudentsResponse) Reset() {
	*x = GetClassroomsAndStudentsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fullstack_code_challenge_v1_fullstack_code_challenge_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetClassroomsAndStudentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClassroomsAndStudentsResponse) ProtoMessage() {}

func (x *GetClassroomsAndStudentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fullstack_code_challenge_v1_fullstack_code_challenge_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClassroomsAndStudentsResponse.ProtoReflect.Descriptor instead.
func (*GetClassroomsAndStudentsResponse) Descriptor() ([]byte, []int) {
	return file_fullstack_code_challenge_v1_fullstack_code_challenge_proto_rawDescGZIP(), []int{1}
}

func (x *GetClassroomsAndStudentsResponse) GetClassrooms() map[uint32]*Classroom {
	if x != nil {
		return x.Classrooms
	}
	return nil
}

type Student struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id   uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *Student) Reset() {
	*x = Student{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fullstack_code_challenge_v1_fullstack_code_challenge_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Student) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Student) ProtoMessage() {}

func (x *Student) ProtoReflect() protoreflect.Message {
	mi := &file_fullstack_code_challenge_v1_fullstack_code_challenge_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Student.ProtoReflect.Descriptor instead.
func (*Student) Descriptor() ([]byte, []int) {
	return file_fullstack_code_challenge_v1_fullstack_code_challenge_proto_rawDescGZIP(), []int{2}
}

func (x *Student) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Student) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type Classroom struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id       uint32     `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name     string     `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Students []*Student `protobuf:"bytes,3,rep,name=students,proto3" json:"students,omitempty"`
}

func (x *Classroom) Reset() {
	*x = Classroom{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fullstack_code_challenge_v1_fullstack_code_challenge_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Classroom) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Classroom) ProtoMessage() {}

func (x *Classroom) ProtoReflect() protoreflect.Message {
	mi := &file_fullstack_code_challenge_v1_fullstack_code_challenge_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Classroom.ProtoReflect.Descriptor instead.
func (*Classroom) Descriptor() ([]byte, []int) {
	return file_fullstack_code_challenge_v1_fullstack_code_challenge_proto_rawDescGZIP(), []int{3}
}

func (x *Classroom) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Classroom) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Classroom) GetStudents() []*Student {
	if x != nil {
		return x.Students
	}
	return nil
}

var File_fullstack_code_challenge_v1_fullstack_code_challenge_proto protoreflect.FileDescriptor

var file_fullstack_code_challenge_v1_fullstack_code_challenge_proto_rawDesc = []byte{
	0x0a, 0x3a, 0x66, 0x75, 0x6c, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x75,
	0x6c, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x2d, 0x63, 0x6f, 0x64, 0x65, 0x2d, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x66, 0x75,
	0x6c, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x45, 0x0a, 0x1f, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x0c, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x49, 0x44, 0x73, 0x22, 0xf8,
	0x01, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x73,
	0x41, 0x6e, 0x64, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x6d, 0x0a, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x4d, 0x2e, 0x66, 0x75, 0x6c, 0x6c, 0x73, 0x74,
	0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e,
	0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x72, 0x6f,
	0x6f, 0x6d, 0x73, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f,
	0x6d, 0x73, 0x1a, 0x65, 0x0a, 0x0f, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x66, 0x75, 0x6c, 0x6c, 0x73, 0x74, 0x61,
	0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x2d, 0x0a, 0x07, 0x53, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x71, 0x0a, 0x09, 0x43, 0x6c, 0x61, 0x73,
	0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x08, 0x73, 0x74, 0x75,
	0x64, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x66, 0x75,
	0x6c, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e,
	0x74, 0x52, 0x08, 0x73, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x32, 0xca, 0x01, 0x0a, 0x16,
	0x46, 0x75, 0x6c, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x43, 0x6f, 0x64, 0x65, 0x43, 0x68, 0x61,
	0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x12, 0xaf, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x43, 0x6c,
	0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x41, 0x6e, 0x64, 0x53, 0x74, 0x75, 0x64, 0x65,
	0x6e, 0x74, 0x73, 0x12, 0x3c, 0x2e, 0x66, 0x75, 0x6c, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x41,
	0x6e, 0x64, 0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x3d, 0x2e, 0x66, 0x75, 0x6c, 0x6c, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x41, 0x6e, 0x64,
	0x53, 0x74, 0x75, 0x64, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x72, 0x6f, 0x6f, 0x6d, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fullstack_code_challenge_v1_fullstack_code_challenge_proto_rawDescOnce sync.Once
	file_fullstack_code_challenge_v1_fullstack_code_challenge_proto_rawDescData = file_fullstack_code_challenge_v1_fullstack_code_challenge_proto_rawDesc
)

func file_fullstack_code_challenge_v1_fullstack_code_challenge_proto_rawDescGZIP() []byte {
	file_fullstack_code_challenge_v1_fullstack_code_challenge_proto_rawDescOnce.Do(func() {
		file_fullstack_code_challenge_v1_fullstack_code_challenge_proto_rawDescData = protoimpl.X.CompressGZIP(file_fullstack_code_challenge_v1_fullstack_code_challenge_proto_rawDescData)
	})
	return file_fullstack_code_challenge_v1_fullstack_code_challenge_proto_rawDescData
}

var file_fullstack_code_challenge_v1_fullstack_code_challenge_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_fullstack_code_challenge_v1_fullstack_code_challenge_proto_goTypes = []interface{}{
	(*GetClassroomsAndStudentsRequest)(nil),  // 0: fullstack_code_challenge.v1.GetClassroomsAndStudentsRequest
	(*GetClassroomsAndStudentsResponse)(nil), // 1: fullstack_code_challenge.v1.GetClassroomsAndStudentsResponse
	(*Student)(nil),                          // 2: fullstack_code_challenge.v1.Student
	(*Classroom)(nil),                        // 3: fullstack_code_challenge.v1.Classroom
	nil,                                      // 4: fullstack_code_challenge.v1.GetClassroomsAndStudentsResponse.ClassroomsEntry
}
var file_fullstack_code_challenge_v1_fullstack_code_challenge_proto_depIdxs = []int32{
	4, // 0: fullstack_code_challenge.v1.GetClassroomsAndStudentsResponse.classrooms:type_name -> fullstack_code_challenge.v1.GetClassroomsAndStudentsResponse.ClassroomsEntry
	2, // 1: fullstack_code_challenge.v1.Classroom.students:type_name -> fullstack_code_challenge.v1.Student
	3, // 2: fullstack_code_challenge.v1.GetClassroomsAndStudentsResponse.ClassroomsEntry.value:type_name -> fullstack_code_challenge.v1.Classroom
	0, // 3: fullstack_code_challenge.v1.FullstackCodeChallenge.GetClassroomsAndStudents:input_type -> fullstack_code_challenge.v1.GetClassroomsAndStudentsRequest
	1, // 4: fullstack_code_challenge.v1.FullstackCodeChallenge.GetClassroomsAndStudents:output_type -> fullstack_code_challenge.v1.GetClassroomsAndStudentsResponse
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_fullstack_code_challenge_v1_fullstack_code_challenge_proto_init() }
func file_fullstack_code_challenge_v1_fullstack_code_challenge_proto_init() {
	if File_fullstack_code_challenge_v1_fullstack_code_challenge_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fullstack_code_challenge_v1_fullstack_code_challenge_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClassroomsAndStudentsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fullstack_code_challenge_v1_fullstack_code_challenge_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetClassroomsAndStudentsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fullstack_code_challenge_v1_fullstack_code_challenge_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Student); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fullstack_code_challenge_v1_fullstack_code_challenge_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Classroom); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fullstack_code_challenge_v1_fullstack_code_challenge_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fullstack_code_challenge_v1_fullstack_code_challenge_proto_goTypes,
		DependencyIndexes: file_fullstack_code_challenge_v1_fullstack_code_challenge_proto_depIdxs,
		MessageInfos:      file_fullstack_code_challenge_v1_fullstack_code_challenge_proto_msgTypes,
	}.Build()
	File_fullstack_code_challenge_v1_fullstack_code_challenge_proto = out.File
	file_fullstack_code_challenge_v1_fullstack_code_challenge_proto_rawDesc = nil
	file_fullstack_code_challenge_v1_fullstack_code_challenge_proto_goTypes = nil
	file_fullstack_code_challenge_v1_fullstack_code_challenge_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// FullstackCodeChallengeClient is the client API for FullstackCodeChallenge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FullstackCodeChallengeClient interface {
	// Returns details of all GoGuardian Classrooms.
	GetClassroomsAndStudents(ctx context.Context, in *GetClassroomsAndStudentsRequest, opts ...grpc.CallOption) (*GetClassroomsAndStudentsResponse, error)
}

type fullstackCodeChallengeClient struct {
	cc grpc.ClientConnInterface
}

func NewFullstackCodeChallengeClient(cc grpc.ClientConnInterface) FullstackCodeChallengeClient {
	return &fullstackCodeChallengeClient{cc}
}

func (c *fullstackCodeChallengeClient) GetClassroomsAndStudents(ctx context.Context, in *GetClassroomsAndStudentsRequest, opts ...grpc.CallOption) (*GetClassroomsAndStudentsResponse, error) {
	out := new(GetClassroomsAndStudentsResponse)
	err := c.cc.Invoke(ctx, "/fullstack_code_challenge.v1.FullstackCodeChallenge/GetClassroomsAndStudents", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FullstackCodeChallengeServer is the server API for FullstackCodeChallenge service.
type FullstackCodeChallengeServer interface {
	// Returns details of all GoGuardian Classrooms.
	GetClassroomsAndStudents(context.Context, *GetClassroomsAndStudentsRequest) (*GetClassroomsAndStudentsResponse, error)
}

// UnimplementedFullstackCodeChallengeServer can be embedded to have forward compatible implementations.
type UnimplementedFullstackCodeChallengeServer struct {
}

func (*UnimplementedFullstackCodeChallengeServer) GetClassroomsAndStudents(context.Context, *GetClassroomsAndStudentsRequest) (*GetClassroomsAndStudentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClassroomsAndStudents not implemented")
}

func RegisterFullstackCodeChallengeServer(s *grpc.Server, srv FullstackCodeChallengeServer) {
	s.RegisterService(&_FullstackCodeChallenge_serviceDesc, srv)
}

func _FullstackCodeChallenge_GetClassroomsAndStudents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClassroomsAndStudentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FullstackCodeChallengeServer).GetClassroomsAndStudents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fullstack_code_challenge.v1.FullstackCodeChallenge/GetClassroomsAndStudents",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FullstackCodeChallengeServer).GetClassroomsAndStudents(ctx, req.(*GetClassroomsAndStudentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FullstackCodeChallenge_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fullstack_code_challenge.v1.FullstackCodeChallenge",
	HandlerType: (*FullstackCodeChallengeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetClassroomsAndStudents",
			Handler:    _FullstackCodeChallenge_GetClassroomsAndStudents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "fullstack_code_challenge/v1/fullstack-code-challenge.proto",
}
